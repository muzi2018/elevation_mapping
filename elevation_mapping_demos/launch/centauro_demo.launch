<?xml version="1.0" encoding="utf-8"?>

<launch>
  <!-- Start position of waffle robot in scene. -->
  <arg name="x_pos" default="-3.0" doc="Starting x coordinate of the robot in the simulation scene. "/>
  <arg name="y_pos" default="1.0"  doc="Starting y coordinate of the robot in the simulation scene. "/>
  <arg name="z_pos" default="0.0"  doc="Starting z coordinate of the robot in the simulation scene. "/>

  <!-- Start gazebo server with turtlebot3_house scene. -->
  <include file="$(find centauro_gazebo)/launch/centauro_world.launch">
    <!-- Documentation taken from http://gazebosim.org/tutorials?tut=ros_roslaunch-->
    <!-- <arg name="world_name" value="$(find turtlebot3_gazebo)/worlds/turtlebot3_house.world"/> -->
    <arg name="paused" value="false"/> <!--S tart Gazebo in a paused state-->
    <arg name="use_sim_time" value="true"/> <!-- Tells ROS nodes asking for time to get the Gazebo-published simulation time, published over the ROS topic /clock-->
    <arg name="gui" value="true"/> <!-- Launch the user interface window of Gazebo-->
    <arg name="headless" value="false"/> <!-- Enable gazebo state log recording-->
    <arg name="debug" value="false"/> <!-- Start gzserver (Gazebo Server) in debug mode using gdb-->
  </include>

  <param name="robot_description" textfile="$(find centauro_urdf)/urdf/centauro.urdf"/>

  <!-- Static transform from 'world' to 'pelvis' -->
  <node pkg="tf" type="static_transform_publisher" name="world_to_pelvis_broadcaster" args="0 0 0 0 0 0 world pelvis 100" />



  <!-- Publish tf 'base_footprint' as pose.-->
  <node pkg="elevation_mapping_demos" type="tf_to_pose_publisher.py" name="waffle_pose_publisher" output="screen">
    <param name="from_frame" type="string" value="world"/>
    <param name="to_frame" type="string" value="pelvis"/>
  </node>


  <!-- Run a passthrough filter to down-sample the sensor point cloud.-->
  <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen"/>
  <node pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid pcl_manager" output="screen">
    <remap from="~input" to="/D435i_camera/depth/color/points"/>
    <remap from="~output" to="/camera/depth/points_downsampled"/>
    <rosparam>
      filter_field_name: z <!-- the filter according to z direction which is the distance from the sensor to object-->
      filter_limit_min: 0.01
      filter_limit_max: 6.0  <!-- Limit the range of points to forward to 6 meters in viewing direction-->
      filter_limit_negative: False
      leaf_size: 0.05  <!-- Limit the density to 5 cm; control the size of voxels in VoxelGrid-->
    </rosparam>
  </node>

  <!-- Launch elevation mapping node.  src/elevation_mapping_node.cpp-->
  <node pkg="elevation_mapping" type="elevation_mapping" name="elevation_mapping" output="screen">
    <rosparam command="load" file="$(find elevation_mapping_demos)/config/robots/centauro_robot.yaml"/>
    <rosparam command="load" file="$(find elevation_mapping_demos)/config/postprocessing/postprocessor_pipeline.yaml"/>
  </node>

  <!-- Launch RViz with the demo configuration. -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find elevation_mapping_demos)/rviz/centauro_demo.rviz"/>

</launch>